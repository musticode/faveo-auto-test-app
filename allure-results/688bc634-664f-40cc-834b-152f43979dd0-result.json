{"uuid":"688bc634-664f-40cc-834b-152f43979dd0","historyId":"8f1cfa96ad9f2b54b80eed25605b9bc1","fullName":"org.testapp.Api.Test.RestTestClasses.TenantSaasTest.getTenantStatus","labels":[{"name":"package","value":"org.testapp.Api.Test.RestTestClasses.TenantSaasTest"},{"name":"testClass","value":"org.testapp.Api.Test.RestTestClasses.TenantSaasTest"},{"name":"testMethod","value":"getTenantStatus"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"faveo-auto-test-app"},{"name":"subSuite","value":"org.testapp.Api.Test.RestTestClasses.TenantSaasTest"},{"name":"host","value":"mustafakas-MacBook-Pro.local"},{"name":"thread","value":"1914@mustafakas-MacBook-Pro.local.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"getTenantStatus","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"1 expectation failed.\nXML path status doesn't match.\nExpected: <200>\n  Actual: nullLoginnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullRegisternullnull\n    let loginUser = function () {\n        let button = document.getElementById('request')\n        button.disabled = true;\n        let loading = document.getElementById('loading');\n        loading.style.visibility = 'visible';\n        let email = document.getElementById('email').value;\n        let password = document.getElementById('password').value;\n        document.getElementById('message').style.color = '';\n        document.getElementById('message').innerHTML = \"\"\n        if (email === \"\") {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>\" + \"Email Field can not be empty\" + \"</li>\";\n            return;\n        }\n        if (password === \"\") {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>\" + \"Password Field can not be empty\" + \"</li>\";\n            return;\n        }\n        let re = /([A-Z0-9a-z_-][^@])+?@[^$#<>?]+?\\.[\\w]{2,4}/.test(document.getElementById('email').value);\n        if (!re) {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>Not valid email address</li>\";\n            return;\n        }\n        $.ajax({\n            url: \"/saas/login\",\n            type: \"post\",\n            data: {\n                email: email,\n                password: password,\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n            },\n            success: function (response) {\n                if (response.success) {\n                    location.href = \"/saas/settings\"\n                } else {\n                    document.getElementById('message').style.color = 'red';\n                    document.getElementById('message').innerHTML += \"<li>\" + \"Something went wrong\" + \"</li>\";\n                }\n            },\n            error: function (xhr, status, errorThrown) {\n                if (xhr.responseJSON.errors.email.includes(\"auth.failed\")) {\n                    document.getElementById('message').style.color = 'red';\n                    document.getElementById('message').innerHTML += \"<li>\" + \"Incorrect password/email\" + \"</li>\";\n                }\n                loading.style.visibility = 'hidden';\n                button.disabled = false;\n            }\n        })\n    }\n\n","trace":"java.lang.AssertionError: 1 expectation failed.\nXML path status doesn't match.\nExpected: <200>\n  Actual: nullLoginnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullRegisternullnull\n    let loginUser = function () {\n        let button = document.getElementById('request')\n        button.disabled = true;\n        let loading = document.getElementById('loading');\n        loading.style.visibility = 'visible';\n        let email = document.getElementById('email').value;\n        let password = document.getElementById('password').value;\n        document.getElementById('message').style.color = '';\n        document.getElementById('message').innerHTML = \"\"\n        if (email === \"\") {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>\" + \"Email Field can not be empty\" + \"</li>\";\n            return;\n        }\n        if (password === \"\") {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>\" + \"Password Field can not be empty\" + \"</li>\";\n            return;\n        }\n        let re = /([A-Z0-9a-z_-][^@])+?@[^$#<>?]+?\\.[\\w]{2,4}/.test(document.getElementById('email').value);\n        if (!re) {\n            document.getElementById('message').style.color = 'red';\n            document.getElementById('message').innerHTML += \"<li>Not valid email address</li>\";\n            return;\n        }\n        $.ajax({\n            url: \"/saas/login\",\n            type: \"post\",\n            data: {\n                email: email,\n                password: password,\n                'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n            },\n            success: function (response) {\n                if (response.success) {\n                    location.href = \"/saas/settings\"\n                } else {\n                    document.getElementById('message').style.color = 'red';\n                    document.getElementById('message').innerHTML += \"<li>\" + \"Something went wrong\" + \"</li>\";\n                }\n            },\n            error: function (xhr, status, errorThrown) {\n                if (xhr.responseJSON.errors.email.includes(\"auth.failed\")) {\n                    document.getElementById('message').style.color = 'red';\n                    document.getElementById('message').innerHTML += \"<li>\" + \"Incorrect password/email\" + \"</li>\";\n                }\n                loading.style.visibility = 'hidden';\n                button.disabled = false;\n            }\n        })\n    }\n\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:598)\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:760)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.content(ResponseSpecificationImpl.groovy:251)\n\tat com.jayway.restassured.specification.ResponseSpecification$content$1.callCurrent(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:52)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:154)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:190)\n\tat com.jayway.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:234)\n\tat com.jayway.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:264)\n\tat org.testapp.Api.Test.RestTestClasses.TenantSaasTest.getTenantStatus(TenantSaasTest.java:70)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\n\tat org.testng.TestRunner.run(TestRunner.java:596)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:276)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1134)\n\tat org.testng.TestNG.runSuites(TestNG.java:1063)\n\tat org.testng.TestNG.run(TestNG.java:1031)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n"},"stage":"finished","description":"Get tenant status","steps":[],"attachments":[],"parameters":[],"start":1669193375683,"stop":1669193428464}